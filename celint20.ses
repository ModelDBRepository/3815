{load_file("nrngui.hoc")}
objectvar save_window_, rvp_
objectvar scene_vector_[4]
objectvar ocbox_, ocbox_list_, scene_, scene_list_
{ocbox_list_ = new List()  scene_list_ = new List()}
{pwman_place(0,0,0)}

//Begin NetReadyCellGUI[0]
{
load_file("netbild.hoc")
}
{ocbox_ = new NetReadyCellGUI(1)}
{ocbox_.tobj = new CellBuild(1)}
{object_push(ocbox_.tobj)}
{
version(5.7)
continuous = 0
}
{object_push(topol)}
{
first = 0
slist.remove_all()
sname = "dend"
objref tobj
}
{
tobj = new CellBuildSection("soma",0, 0, tobj, 0) slist.append(tobj)
  tobj.position(0,0,15,0) tobj.lx=7.5 tobj.ly=0 tobj.i3d=0
all_init()
}
for i=0, slist.count-1 {slist.object(i).rdses()}
{object_pop()}
{
}
{object_push(subsets)}
{first = 0}
{ tobj = snlist.object(0)}
{consist()}
{object_pop()}
{
}
{object_push(geom)}
{
first = 0
tobj = new GeoSpec(4)
tobj.value = 6000
bild.topol.slist.object(0).geo.append(tobj)
tobj = new GeoSpec(6)
tobj.value = 1
bild.topol.slist.object(0).geo.append(tobj)
set_default()
}
{object_pop()}
{
}
{object_push(memb)}
{first=0}
{
tobj = new FakeMechStan(0)
tobj.value = 80
tobj.set_default()
tobj = new MStanWrap(tobj, 0)
bild.topol.slist.object(0).ml.append(tobj)
}
{
tobj = new FakeMechStan(1)
tobj.value = 1
tobj.set_default()
tobj = new MStanWrap(tobj, 0)
bild.topol.slist.object(0).ml.append(tobj)
}
{
tobj = new MechanismStandard("pas")
tobj.set("g_pas", 1.66667e-05, 0)
tobj.set("e_pas", 0, 0)
tobj = new MStanWrap(tobj, 1)
bild.topol.slist.object(0).ml.append(tobj)
}
{object_pop()}
{
}
{object_push(manage)}
{
first = 0
classname = "Cell"
etop=1 esub=1 egeom=1 emem=1
itop=1 isub=0 igeom=0 imem=0
bild.topol.names_off = 0
bild.topol.circles_off = 0
output_index = 0  output_x = 1
thresh = 10
}
{object_pop()}
{
cexport()
}
{object_pop()}
{
save_window_=ocbox_.tobj.gtopol
save_window_.size(-200,200,-150,150)
scene_vector_[2] = save_window_
ocbox_.tobj.gtopol = save_window_
save_window_.save_name("ocbox_.tobj.gtopol")
}
{object_push(ocbox_)}
stgui = new SynTypeGUI(1)
{object_push(stgui)}
{
tobj = new MechanismStandard("tmgsyn")
tobj.set("e", 100, 0)
tobj.set("tau_1", 1.5, 0)
tobj.set("tau_rec", 130, 0)
tobj.set("tau_facil", 530, 0)
tobj.set("U", 0.03, 0)
tobj.set("u0", 0, 0)
}
{append(tobj, "F")}
{object_pop()}
nrc = new NetReadyCell(tobj, stgui.stypelist)
nrc.name = "Int"
tobj = nrc.cb.topol.slist.object(0)
{nrc.synlist.append(new SynTypeInstance(nrc.stype.object[0],tobj,0.5,0.5,-1))}
{g.size(-166.667,166.667,-113.83,113.83)}
{object_pop()}
{
ocbox_.map("NetReadyCellGUI[0]", 0, 105, 404.16, 330.24)
}
objref ocbox_
//End NetReadyCellGUI[0]

{
ocbox_ = new VBox()
ocbox_list_.prepend(ocbox_)
ocbox_.intercept(1)
}
{
xpanel("Description and Instructions", 0)
xlabel("Synaptic facilitation at a synapse from a layer V pyramidal cell")
xlabel("onto an inhibitory interneuron.")
xlabel("To run a simulation, click on Init & Run in the RunControl window (above).")
xlabel("=============================")
xlabel("What are all these windows?")
xlabel("The NetReadyCellGUI window was used to specify a model 'interneuron'")
xlabel("that has a synaptic mechanism on it.  To see the parameters that affect")
xlabel("synaptic plasticity, click on Info in the NetReadyCellGUI window and")
xlabel("select the Synapse Types item.")
xlabel("The ArtCellGUI window controls the timing and rate of firing of an")
xlabel("'artificial neuron' whose sole purpose is to activate the synapse.")
xlabel("The NetGUI window (under this one) specifies that an artificial neuron")
xlabel("drives the synaptic mechanism on an interneuron.")
xlabel("For a tutorial on how to use these tools to create your own models,")
xlabel("see the Documentation page at http://www.neuron.yale.edu/")
xpanel()
}
{
ocbox_ = ocbox_list_.object(0)
ocbox_.intercept(0)
ocbox_.map("Description and Instructions", 400, 400, 437.76, 323.52)
}
objref ocbox_
objectvar scene_vector_[1]
{doNotify()}
